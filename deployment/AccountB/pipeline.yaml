---
AWSTemplateFormatVersion: 2010-09-09
Description: CodePipeline example For web application

Parameters:
  WebappName:
    Description: Web app name
    Type: String
    Default: webapp-sample

  CodePipelineSourceArtifactsBucketName:
    Description: CodePipeline source artifacts bucket name sample
    Type: String

  CodePipelineBuildArtifactsBucketName:
    Description: CodePipeline build artifacts bucket name sample
    Type: String
    Default: ""

Conditions:
  CodePipelineBuildArtifactsBucketNameNull: !Equals [ !Ref CodePipelineBuildArtifactsBucketName, "" ]

Resources:
  CodePipelineBuildArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
        - CodePipelineBuildArtifactsBucketNameNull
        - !Sub "codepipeline-build-artifacts-${AWS::Region}-${AWS::AccountId}"
        - !Ref CodePipelineBuildArtifactsBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodeBuildWebappBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "codebuild-${WebappName}-ppl-build-service-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CodeBuildWebappBuildIAMPolicy

  CodeBuildWebappBuildIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "CodeBuild IAM Access Policy"
      ManagedPolicyName: !Sub "codebuild-${WebappName}-ppl-build-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:Describe*"
              - "ecs:List*"
              - "logs:*"
              - "s3:*"
              - "iam:*Role"
              - "iam:*Policy"
              - "logs:*"
              - "codebuild:*"
            Resource: "*"

  DeployWebappECSDeployIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "deploy-${WebappName}-ppl-ecsdeploy-service-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref DeployWebappECSDeployIAMPolicy

  DeployWebappECSDeployIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "CodeBuild IAM Access Policy"
      ManagedPolicyName: !Sub "codebuild-${WebappName}-ppl-ecsdeploy-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:*"
              - "s3:*"
              - "codebuild:*"
              - "ec2:*SecurityGroup*"
              - "elasticloadbalancing:*"
              - "ecs:*"
              - "iam:*Role"
              - "iam:*Policy"
            Resource: "*"

  CodePipelineWebappIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Ref CodePipelineWebappIAMPolicy
      Path: "/"
      RoleName: !Sub "codepipeline-${WebappName}-service-role1"

  CodePipelineWebappIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "CodePipeline Webapp Sample Policy"
      ManagedPolicyName: !Sub "codepipeline-${WebappName}-access"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "iam:GetRole"
              - "iam:PassRole"
              - "iam:ListRoles"
            Resource: "*"
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - ecs-tasks.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - codepipeline.amazonaws.com
                  - ec2.amazonaws.com
                  - codebuild.amazonaws.com
                  - codedeploy.amazonaws.com
          - Effect: Allow
            Action:
              - "codecommit:*"
              - "cloudformation:*"
              - "codebuild:*"
              - "codedeploy:*"
              - "codepipeline:*"
              - "ec2:Describe*"
              - "ecr:*"
              - "ecs:*"
              - "logs:*"
              - "s3:*"
              - "sns:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource:
              - !GetAtt CodeBuildWebappBuildIAMRole.Arn
          - Effect: Allow
            Action:
              - "s3:PutObject"
              - "s3:Get*"
            Resource:
              - !Sub "arn:aws:s3:::${CodePipelineBuildArtifactsBucket}*"
              - !Sub "arn:aws:s3:::${CodePipelineBuildArtifactsBucket}*/*"

  CodePipelineWebapp:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${WebappName}-pipeline"
      RoleArn: !GetAtt CodePipelineWebappIAMRole.Arn
      RestartExecutionOnUpdate: false
      ArtifactStores:
        - Region: !Ref AWS::Region
          ArtifactStore:
            Type: S3
            Location: !Ref CodePipelineBuildArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              Namespace: SourceVariables
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                S3Bucket: !Ref CodePipelineSourceArtifactsBucketName
                S3ObjectKey: !Sub "${WebappName}-deployment.zip"
                PollForSourceChanges: "false"
              RunOrder: 1
              OutputArtifacts:
                - Name: SourceArtifact
            - Name: ECRSource
              Namespace: ECRSourceVariables
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: ECR
              Configuration:
                ImageTag: latest
                RepositoryName: !Ref WebappName
              RunOrder: 1
              OutputArtifacts:
                - Name: ECRSourceArtifact
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildWebappBuildProject
                PrimarySource: SourceArtifact
              RunOrder: 1
              InputArtifacts:
                - Name: SourceArtifact
                - Name: ECRSourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: CreateOrReplaceChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Region: !Ref AWS::Region
              RunOrder: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Sub "${WebappName}-ecsservice-changeset"
                RoleArn: !GetAtt DeployWebappECSDeployIAMRole.Arn
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub "${WebappName}-ecsservice"
                TemplatePath: BuildArtifact::packaged.yaml
                TemplateConfiguration: BuildArtifact::packaged.configuration.json
              InputArtifacts:
                - Name: BuildArtifact
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Region: !Ref AWS::Region
              RunOrder: 2
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub "${WebappName}-ecsservice"
                ChangeSetName: !Sub "${WebappName}-ecsservice-changeset"
                RoleArn: !GetAtt DeployWebappECSDeployIAMRole.Arn
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: BuildArtifact

  CodeBuildWebappBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${WebappName}-build"
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: "buildspec.yml"
      Cache:
        Modes:
          - LOCAL_SOURCE_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
        Type: LOCAL
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: false
      ServiceRole: !Ref CodeBuildWebappBuildIAMRole
      QueuedTimeoutInMinutes: 30
      TimeoutInMinutes: 20


  EventBridgeWebappImageChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "eventbridge-${WebappName}-ppl-trigger"
      Description: The event rule to trigger codepipeline example
      EventPattern:
        source:
          - "aws.ecr"
        detail-type:
          - "ECR Image Scan"
        detail:
          scan-status:
            - COMPLETE
          repository-name:
            - !Ref WebappName
          image-tag:
            - "latest"
      State: ENABLED
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineWebapp}"
          Id: !Sub "target-codepipeline-${WebappName}"
          RoleArn: !GetAtt EventBridgeWebappImageChangeIAMRole.Arn

  EventBridgeWebappImageChangeIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref EventBridgeWebappImageChangeIAMAccessPolicy
      Path: /

  EventBridgeWebappImageChangeIAMAccessPolicy:
    DependsOn: CodePipelineWebapp
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "codebuild iam access policy example"
      ManagedPolicyName: !Sub "eventbridge-${WebappName}-image-change-access"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'codepipeline:StartPipelineExecution'
            Resource:
              - !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipelineWebapp}"